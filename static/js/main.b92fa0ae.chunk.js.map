{"version":3,"sources":["components/todo-form/todo-form.component.jsx","components/todo/todo.component.jsx","components/todo-list/todo-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","handleChange","event","setState","input","target","value","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","state","inputRef","createRef","edit","this","current","focus","className","type","placeholder","name","onChange","ref","React","Component","Todo","submitUpdate","updateTodo","editState","todos","completeTodo","removeTodo","map","todo","index","isComplete","onClick","TodoList","addTodo","test","newTodos","console","log","todoId","newValue","prevState","item","removeArr","filter","updatedTodos","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b92fa0ae.chunk.js","sourcesContent":["import React, { createRef } from 'react';\r\n\r\n\r\nclass TodoForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.inputRef = createRef(null);\r\n\r\n        this.state = {\r\n            input: (props.edit ? props.edit.value : '')\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.inputRef.current.focus()\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({input: event.target.value})\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        this.props.onSubmit({\r\n            id: Math.floor(Math.random() * 1000),\r\n            text: this.state.input\r\n        })\r\n\r\n        this.setState({input: ''})\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return(\r\n            <form className='todo-form' onSubmit={this.handleSubmit}>\r\n\r\n                {\r\n                    this.props.edit ? (\r\n                        <div>\r\n                            <input \r\n                                type='text'\r\n                                placeholder='Update your item'\r\n                                value={this.state.input}\r\n                                name='text'\r\n                                className='todo-input edit'\r\n                                onChange={this.handleChange}\r\n                                ref={this.inputRef}\r\n                            />\r\n                            <button className='todo-button edit'>Update</button>\r\n                        </div>\r\n                    ) : (\r\n                        <div>\r\n                            <input \r\n                                type='text'\r\n                                placeholder='Add a todo'\r\n                                value={this.state.input}\r\n                                name='text'\r\n                                className='todo-input'\r\n                                onChange={this.handleChange}\r\n                                ref={this.inputRef}\r\n                            />\r\n                            <button className='todo-button'>Add todo</button>\r\n                        </div>\r\n                    )\r\n                }\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoForm;","import React from 'react';\r\n\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\nimport { BiLeftArrowAlt, BiCheck } from 'react-icons/bi';\r\n\r\nimport TodoForm from '../todo-form/todo-form.component';\r\n\r\nclass Todo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            edit: {\r\n                id: null,\r\n                value: ''\r\n            }\r\n        }\r\n    }\r\n\r\n    submitUpdate = value => {\r\n        const { edit } = this.state;\r\n\r\n        this.props.updateTodo(edit.id, value);\r\n        \r\n        this.setState({edit: {\r\n            id: null,\r\n            value: ''\r\n        }})\r\n    }\r\n\r\n    editState = value => {\r\n        this.setState({edit: {\r\n            id: value.id,\r\n            value: value.text\r\n        }})\r\n    }\r\n\r\n\r\n    render() {\r\n        const { todos, completeTodo, removeTodo} = this.props;\r\n\r\n        if (this.state.edit.id) {\r\n            return <TodoForm edit={this.state.edit} onSubmit={this.submitUpdate} />\r\n        }\r\n\r\n        return todos.map((todo, index) => (\r\n            <div \r\n                className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n                key={index}\r\n            >\r\n                <div key ={todo.id}>\r\n                    {todo.text}\r\n                </div>\r\n                <div className='icons'>\r\n                    {\r\n                        todo.isComplete ? (\r\n                            <BiLeftArrowAlt className='uncheck-icon' onClick={() => completeTodo(todo.id)}/>\r\n                        ) : (\r\n                            <BiCheck className='check-icon' onClick={() => completeTodo(todo.id)}/>\r\n                        )\r\n                    }\r\n                    <RiCloseCircleLine \r\n                        onClick={() => removeTodo(todo.id)}\r\n                        className='delete-icon'\r\n                    />\r\n                    <TiEdit \r\n                        onClick={() => this.editState(todo)}\r\n                        className='edit-icon'\r\n                    />\r\n                </div>\r\n            </div>\r\n        ));\r\n    }\r\n}\r\n\r\n\r\nexport default Todo;","import React from 'react';\r\n\r\nimport TodoForm from '../todo-form/todo-form.component';\r\nimport Todo from '../todo/todo.component';\r\n\r\n \r\nclass TodoList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            todos: []\r\n        }\r\n    }\r\n\r\n    addTodo = todo => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return;\r\n        }\r\n\r\n        const newTodos = [todo, ...this.state.todos]\r\n\r\n        this.setState({todos: newTodos}, () => console.log(this.state));\r\n    }\r\n\r\n    updateTodo = (todoId, newValue) => {\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n\r\n        console.log(this.state.todos);\r\n\r\n        this.setState(prevState => {\r\n            return {todos: prevState.todos.map(item => (item.id === todoId ? newValue : item))}\r\n        })\r\n    }\r\n\r\n    removeTodo = id => {\r\n        const { todos } = this.state;\r\n\r\n        const removeArr = [...todos].filter(todo => todo.id !==id)\r\n\r\n        this.setState({todos: removeArr});\r\n    }\r\n\r\n    completeTodo = id => {\r\n        const { todos } = this.state;\r\n\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        });\r\n        \r\n        this.setState({todos: updatedTodos});\r\n    }\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>What's the Plan for Today?</h1>\r\n                <TodoForm onSubmit={this.addTodo}/>\r\n                <Todo \r\n                    todos={this.state.todos}\r\n                    completeTodo={this.completeTodo}\r\n                    removeTodo={this.removeTodo}\r\n                    updateTodo={this.updateTodo}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\n\nimport TodoList from './components/todo-list/todo-list.component';\n\nimport './App.css';\n\n\nconst App = () => {\n    return (\n        <div className=\"todo-app\">\n            <TodoList />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}